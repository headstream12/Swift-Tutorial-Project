//
//  NetworkProvider.swift
//  Swift-Tutorial
//
//  Created by Игорь on 20/05/2020.
//  Copyright © 2020 Ilya Glazunov. All rights reserved.
/*
    Swift - это новый язык программирования для разработки приложений на  iOS, macOS, watchOS и tvOS. Тем не менее, множество частей Swift знакомы вам по опыту разработки на Objective-C и С.
 
    Swift представляет свою собственную версию фундаментальных типов С и Objective-C, включая Int для целых чисел, Doble(Двойной) и Float(плавающий) для значений с плавающей точкой, Bool для булевых значений и String для текстовых данных. Swift также представляет мощные версии трёх основных коллекционных типов, Array(массив), Set(Набор) и Dictionary(Словарь) как описано в статье под названием "Коллекционные типы"
    
    Как и С, Swift использует переменные для хранения и обращения к значениям по идентифициирующему имени. Swift также ширко использует переменные, значения которых не могут быть изменениы. Они известны как константы, и являются гораздо более мощными чем константы в С. Константы повсеместно используются в Swift, чтобы сделать код безопаснее и чище, когда вы намереваетесь работать со значениями не нуждающимися в изменении.
 
    В дополнение к привычным типам, Swift представляет дополнительный тип, который вы не найдете в Objective-C - tuple(кортеж). Кортежи позволяют вам создавать и передавать группы значений. Вы можете использовать кортеж, чтобы вернуть несколько значений из функции в ввиде одного составного значения.
 
    Swift также вводит опциональные типы, которые обрабатывают отсутствие значения опционалы говорят одно из двух "здесь есть значение и оно равно Х" или "здесь вообще нет значения". Использование опционала похоже на использование nil с указателями в Objective-C, но они работают с любым типом, а не только с классами. Опционалы не только более безопасны и выразительны чем nil указатели в Objective-C, но и являются сердцем многих самых мощных фичей.
 
    Swift - это типобезопасный язык, что означает, что язык подскажет вам типы значений, с которыми может работать ваш код. Если часть вашего кода запрашивает String, типобезопасность не позволяет вам передать ему Int по ошибке. Аналогично, типобезопасность предотвращает случайную передачу опциональной строки в кусок кода, для которого требуется неопциональная строка. Типобезопасность помогает ловить и исправлять ошибки настолько быстро насколько это возможно в процессе разработки.
 
 Глоссарий
 
 1) С - язык программирования общего назначения.
 
 2) Objective-C - язык программирования, родителем которого является С. Использовался для програмирования устройств Apple, до появления Swift
 
 3) Int - один из простейших и самых распространённых типов данных в языках программирования. Служит для представления целых чисел.
 
 4) Double - компьютерный формат представления числа с плавающей запятой, занимающий в памяти 64 бита, или 8 байт.
 
 5) Float — экспоненциальная форма представления вещественных (действительных) чисел, в которой число хранится в виде мантиссы и порядка (показателя степени).

 6) Bool - — примитивный тип данных в информатике, принимающий два возможных значения, иногда называемых истиной (true) и ложью (false).
 
 7) Array - Массив (в некоторых языках программирования также таблица, ряд, матрица) — структура данных, хранящая набор значений (элементов массива), идентифицируемых по индексу или набору индексов, принимающих целые (или приводимые к целым) значения из некоторого заданного непрерывного диапазона.
 
 8) Set - Множества. представляют собой неупорядоченные коллекции уникальных элементов. В отличие от массивов в множествах элементы должны быть уникальными, мы не можем определить несколько элементов с одним и тем же значением.
 
 9) Dictionary - Словарь. представляет собой хранилище, в котором каждый элемент имеет ключ и значение. Разные элементы не могут иметь одинаковые ключи. Все ключи в словаре должны быть уникальными. По ключу мы можем найти элемент в словаре изменить его или удалить.
 
 10) Variable - Переменная. представляет именнованный участок в памяти, в котором хранится некоторое значение. Переменные имеют имя и значение. Для определения переменной используется ключевое слово var.
 
 11) Constant - Константа. Подобно переменным, они также хранят некоторое значение, за тем исключением, что определяются с помощью ключевого слова let, и мы не можем после их инициализации изменить их значение.
 
 12) Tuple - Кортеж. Кортежи или Tuples представляют набор значений, которые рассматриваются как один объект. Для создания кортежа используются скобки, внутри которых записываются все элементы кортежа.
 
 13) String - Строка. Для работы с текстом применяются два типа данных: Character и String. Character представляет отдельный символ, а String - строку из нескольких символов. При этом надо отметить, что String - это не просто набор объектов Character, это отдельный тип, который по функциональности отличается. Самый простой способ определения строки и символов представляет использование строковых литералов - значений в двойных кавычках
 
 14) Optional - Опционал. Опциональные типы представляют объекты, которые могут иметь, а могут и не иметь значение. Опциональные типы выступают двойниками базовых типов. Все они имеют в конце вопросительный знак: Int?, String? и т.д. Вопросительный знак как раз указывает, что это опциональный тип.
 
 15) nil - Ничего. Если объект не имеет значения, то ему присваивается специальное значение nil. Значение nil может применяться только к объектам опциональных типов.
 
 16) Function - Функция. Это самостоятельные фрагменты кода, решающие определенную задачу. Каждой функции присваивается уникальное имя, по которому ее можно идентифицировать и "вызвать" в нужный момент.
 
 17) Feature - Фича. В жаргоне программистов, геймеров и других пользователей компьютеров, какая-нибудь недокументированная дополнительная возможность, фишка.
 
 18) iOS — мобильная операционная система для смартфонов, электронных планшетов, носимых проигрывателей и некоторых других устройств, разрабатываемая и выпускаемая американской компанией Apple.
 
 19) macOS(Macintosh Operating System) — семейство проприетарных операционных систем производства корпорации Apple.
 
 20) watchOS — операционная система, разработанная компанией Apple для работы на часах Apple Watch.
 
 21) tvOS — операционная система для четвёртого поколения приставки Apple TV (4 поколения) корпорации Apple.
 */

import Foundation

struct NetworkResult {
    let data: Data
    let response: HTTPURLResponse
}

class NetworkProvider: Network {
    private let session: URLSession
    
    init( ) {
        //let configuration = URLSessionConfiguration()
        //configuration.timeoutIntervalForRequest = 20
        
        self.session = URLSession.shared
    }
    
    func performRequest(
        _ request: URLRequest,
        resultQueue: DispatchQueue,
        completion: @escaping (Result<NetworkResult, NetworkError>) -> Void
    ) {
        let task = session.dataTask(with: request, completionHandler: { data, response, error in
            if let error = error {
                let networkError: NetworkError
                
                if (error as NSError).code == -999 {
                    networkError = .cancelled
                } else {
                    networkError = .networkError(error)
                }
                resultQueue.async {
                    completion(.failure(networkError))
                }
                return
            }
            
            guard let data = data,
                  let httpresponse = response as? HTTPURLResponse
            else {
                resultQueue.async {
                    completion(.failure(.unknown))
                }
                return
            }
            
            resultQueue.async {
                switch httpresponse.statusCode {
                case 200..<300:
                    completion(.success(NetworkResult.init(data: data, response: httpresponse)))
                default:
                    completion(.failure(NetworkError.httpFailure(httpresponse.statusCode)))
                }
            }
        })
        task.resume()
    }
}

